<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using Protoinject;

namespace Protogame
{
	public partial class ComponentizedObject
	{
<#
	for (var i = 0; i < 16; i++)
	{
		var typeArguments = string.Empty;
		var typeArgumentsAppended = string.Empty;
		var typeConstraints = "where T : class";
		var typeParameters = string.Empty;
		var typeParametersAppended = string.Empty;
		var typeParametersPassed = string.Empty;
		if (i > 0)
		{
			typeArguments = "<" + Enumerable.Range(1, i).Select(x => "T" + x).Aggregate((a, b) => a + ", " + b) + ">";
			typeArgumentsAppended = Enumerable.Range(1, i).Select(x => ", T" + x).Aggregate((a, b) => a + b);
			typeParameters = Enumerable.Range(1, i).Select(x => "T" + x + " arg" + x).Aggregate((a, b) => a + ", " + b);
			typeParametersAppended = Enumerable.Range(1, i).Select(x => ", T" + x + " arg" + x).Aggregate((a, b) => a + b);
			typeParametersPassed = Enumerable.Range(1, i).Select(x => ", arg" + x).Aggregate((a, b) => a + b);
		}
#>
		private class ImplementedComponentCallable<T<#=typeArgumentsAppended#>> : IInternalComponentCallable, IComponentCallable<#=typeArguments#> <#=typeConstraints#>
		{
			private readonly Action<T<#=typeArgumentsAppended#>> _method;
			private T[] _targets;

			public ImplementedComponentCallable(Action<T<#=typeArgumentsAppended#>> method)
			{
				_method = method;
			}

			public void SyncComponents(object[] components)
			{
				var c = new List<T>();
				for (var i = 0; i < components.Length; i++)
				{
					if (components[i] is T)
					{
						c.Add((T)components[i]);
					}
				}
				_targets = c.ToArray();
			}

			public void Invoke(<#=typeParameters#>)
			{
				for (var i = 0; i < _targets.Length; i++)
				{
					_method(_targets[i]<#=typeParametersPassed#>);
				}
			}
		}

		protected IComponentCallable<#=typeArguments#> RegisterCallable<T<#=typeArgumentsAppended#>>(Action<T<#=typeArgumentsAppended#>> method) <#=typeConstraints#>
		{
			var callable = new ImplementedComponentCallable<T<#=typeArgumentsAppended#>>(method);
			callable.SyncComponents(this.Components);
			_knownCallablesForSync.Add(callable);
			return callable;
		}
<#
	}
#>
	}
}